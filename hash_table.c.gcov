        -:    0:Source:hash_table.c
        -:    0:Graph:./hash_table.gcno
        -:    0:Data:./hash_table.gcda
        -:    0:Runs:1
        -:    1:#include "hash_table.h"
        -:    2:#include "common.h"
        -:    3:#include <stdlib.h>
        -:    4:#include <assert.h>
        -:    5:#include <stdbool.h>
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include "linked_list.c"
        -:    9:#define No_Buckets 17
        -:   10:
        -:   11:
    #####:   12:static bool int_compare(elem_t a, elem_t b) { return a.int_value == b.int_value;}
        -:   13:
        -:   14:typedef struct entry entry_t;
        -:   15:
        -:   16:struct entry
        -:   17:{
        -:   18:  elem_t key;       // holds the key
        -:   19:  elem_t value;   // holds the value
        -:   20:  entry_t *next; // points to the next entry (possibly NULL)
        -:   21:};
        -:   22:
        -:   23:struct hash_table
        -:   24:{
        -:   25:  entry_t *buckets[No_Buckets];
        -:   26:  hash_function hash_fun;
        -:   27:};
        -:   28:
        -:   29: typedef struct option ioopm_option_t;
        -:   30:
        -:   31: struct option
        -:   32: {
        -:   33:   bool success;
        -:   34:   elem_t value;
        -:   35: };
        -:   36:
        -:   37:
      250:   38:static entry_t *entry_create(elem_t key, elem_t value, entry_t *next)
        -:   39:{
      250:   40:  entry_t *new_entry = calloc(1, sizeof(entry_t)); // Allocate memory for the entry
      250:   41:  new_entry->key = key;
      250:   42:  new_entry->value = value;
      250:   43:  new_entry->next = next;
      250:   44:  return new_entry;
        -:   45:}
        -:   46:
      246:   47:void entry_destroy(entry_t *entry) {
        -:   48:  // Cache the next pointer
      246:   49:  entry_t *next = entry->next;
      246:   50:  free(entry);
      246:   51:  if (next != NULL) {
       41:   52:    entry_destroy(next);
        -:   53:  }
      246:   54:}
        -:   55:
       12:   56:ioopm_hash_table_t *ioopm_hash_table_create(hash_function hash_fun)
        -:   57:{
        -:   58:  /// Allocate space for a ioopm_hash_table_t = No_Buckets pointers to
        -:   59:  /// entry_t's, which will be set to NULL
       12:   60:  ioopm_hash_table_t *result = calloc(1, sizeof(ioopm_hash_table_t));
      216:   61:  for (int i = 0; i < No_Buckets; i++) {
      204:   62:    result->buckets[i] = entry_create(int_elem(0), ptr_elem(NULL), NULL);
        -:   63:  }
       12:   64:  result->hash_fun = hash_fun;
       12:   65:  return result;
        -:   66:}
        -:   67:
       12:   68:void ioopm_hash_table_destroy(ioopm_hash_table_t *ht) {
        -:   69:  // TODO 
      216:   70:  for (int i = 0; i < No_Buckets; i++) {
      204:   71:    entry_destroy(ht->buckets[i]);
        -:   72:  }
       12:   73:  free(ht);
       12:   74:}
        -:   75:
        -:   76:
        -:   77:// static entry_t *find_previous_entry_for_key(entry_t **entry, int key) {
        -:   78://   entry_t *t1 = (*entry)->next;
        -:   79://   if (t1 == NULL) {
        -:   80://     return *entry;
        -:   81://   } else if (t1->key > key) {
        -:   82://     return *entry;
        -:   83://   } else {}
        -:   84://   entry_t *temp_entry = find_previous_entry_for_key(&t1, key);
        -:   85://   return temp_entry;
        -:   86:// }
        -:   87:
        -:   88:
        -:   89:// static entry_t *find_previous_entry_for_key(entry_t **entry, int key) {
        -:   90://   entry_t *t1 = (*entry)->next;
        -:   91://   while (t1 != NULL) {
        -:   92://     if (t1->key > key) {
        -:   93://       break;
        -:   94://     } else {
        -:   95://       t1 = t1->next;
        -:   96://     }
        -:   97://   }
        -:   98://   return *entry;
        -:   99:// }
        -:  100:// */
        -:  101:
        -:  102:
        -:  103:// vi börjar med NULL 0 så vi måste gå på först
       80:  104:static entry_t *find_previous_entry_for_key(entry_t *entry, int key, hash_function hash) {
       80:  105:  if (hash == NULL) {
       72:  106:    entry_t *t1 = entry->next;
       72:  107:    if (t1 == NULL) {
       59:  108:      return entry;
       13:  109:    } else if (t1->key.int_value >= key) {
        9:  110:      return entry;
        -:  111:    } else {
        4:  112:      return find_previous_entry_for_key(t1, key, hash);
        -:  113:    }
        -:  114:  } else {
        8:  115:    entry_t *t1 = entry->next;
        8:  116:    if (t1 == NULL) {
        2:  117:      return entry;
        6:  118:    } else if (hash(t1->key) >= key) {
        2:  119:      return entry;
        -:  120:    } else {
        4:  121:      return find_previous_entry_for_key(t1, key, hash);
        -:  122:    }
        -:  123:  }
        -:  124:}
       47:  125:void ioopm_hash_table_insert(ioopm_hash_table_t *ht, elem_t key, elem_t value)
        -:  126:{
        -:  127:  int bucket;
        -:  128:  int int_key;
        -:  129:  elem_t next_key;
        -:  130:  entry_t *entry;
        -:  131:  entry_t *next;
        -:  132:  /// Search for an existing entry for a key
        -:  133:  // TODO &ht
       47:  134:  if (ht->hash_fun == NULL)
        -:  135:  {
        -:  136:    // treat keys as integers
       44:  137:    int_key = key.int_value; // .i reads the integer part of the elem_t
       44:  138:    bucket = abs(int_key % No_Buckets);
       44:  139:    entry = find_previous_entry_for_key((*ht).buckets[bucket], int_key, ht->hash_fun);
       44:  140:    next = entry->next;
       44:  141:    if(next == NULL) {
       42:  142:      next_key.void_value = NULL;
        -:  143:    } else {
        2:  144:      next_key.int_value = next->key.int_value;
        -:  145:    }
        -:  146:  }
        -:  147:  else
        -:  148:    {
        3:  149:      int_key = ht->hash_fun(key);
        3:  150:      bucket = abs(int_key % No_Buckets);
        3:  151:      entry = find_previous_entry_for_key((*ht).buckets[bucket], int_key, ht->hash_fun);
        3:  152:      next = entry->next;
        3:  153:      if(next == NULL) {
        2:  154:        next_key.void_value = NULL;
        -:  155:      } else {
        1:  156:        next_key.int_value = ht->hash_fun(next->key);
        -:  157:      }
        -:  158:    }
        -:  159:
        -:  160:    /// Check if the next entry should be updated or not
       47:  161:    if (next != NULL && next_key.int_value == int_key) {
        1:  162:        next->value = value;
        -:  163:    } else {
       46:  164:        entry->next = entry_create(key, value, next);
        -:  165:    }
       47:  166:}
        -:  167:
        -:  168:
        -:  169:
        -:  170:
       21:  171:ioopm_option_t ioopm_hash_table_lookup(ioopm_hash_table_t *ht, elem_t key)
        -:  172: {
        -:  173:  int bucket;
        -:  174:  int int_key;
        -:  175:  entry_t *entry;
        -:  176:  entry_t *next;
        -:  177:  /// Search for an existing entry for a key
        -:  178:  // TODO &ht
       21:  179:  if (ht->hash_fun == NULL)
        -:  180:  {
        -:  181:    // treat keys as integers
       20:  182:    int_key = key.int_value; // .i reads the integer part of the elem_t
       20:  183:    bucket = abs(int_key % No_Buckets);
       20:  184:    entry = find_previous_entry_for_key((*ht).buckets[bucket], int_key, ht->hash_fun);
       20:  185:    next = entry->next;
        -:  186:  }
        -:  187:else
        -:  188:  {
        1:  189:    int_key = ht->hash_fun(key);
        1:  190:    bucket = abs(int_key % No_Buckets);
        1:  191:    entry = find_previous_entry_for_key((*ht).buckets[bucket], int_key, ht->hash_fun);
        1:  192:    next = entry->next;
        -:  193:  }
        -:  194:  
        -:  195:  // Den innan var (next && next-> value)
       21:  196:   if (next != NULL)
        -:  197:   {
        4:  198:     return (ioopm_option_t) { .success = true, .value = next->value };
        -:  199:   }
        -:  200:  else
        -:  201:   {
       17:  202:     return (ioopm_option_t) { .success = false};
        -:  203:   }
        -:  204:}
        -:  205:
        4:  206:ioopm_option_t ioopm_hash_table_remove(ioopm_hash_table_t *ht, elem_t key)
        -:  207: {
        -:  208:   int bucket;
        -:  209:  int int_key;
        -:  210:  entry_t *entry;
        -:  211:  entry_t *next;
        -:  212:  /// Search for an existing entry for a key
        -:  213:  // TODO &ht
        4:  214:  if (ht->hash_fun == NULL)
        -:  215:  {
        -:  216:    // treat keys as integers
        4:  217:    int_key = key.int_value; // .i reads the integer part of the elem_t
        4:  218:    bucket = abs(int_key % No_Buckets);
        4:  219:    entry = find_previous_entry_for_key((*ht).buckets[bucket], int_key, ht->hash_fun);
        4:  220:    next = entry->next;
        -:  221:  }
        -:  222:else
        -:  223:  {
    #####:  224:    int_key = ht->hash_fun(key);
    #####:  225:    bucket = abs(int_key % No_Buckets);
    #####:  226:    entry = find_previous_entry_for_key((*ht).buckets[bucket], int_key, ht->hash_fun);
    #####:  227:    next = entry->next;
        -:  228:  }
        4:  229:   ioopm_option_t options = { .success = true, .value = next->value};
        -:  230:
        4:  231:   if (next != NULL)
        -:  232:   {
        4:  233:     entry->next = next->next;
        4:  234:     free(next);
        4:  235:     return options;
        -:  236:   }
        -:  237:   else
        -:  238:   {
    #####:  239:     return options;
        -:  240:   }
        -:  241: }
        -:  242:
       27:  243:size_t ioopm_hash_table_size(ioopm_hash_table_t *ht) {
       27:  244:  size_t counter = 0;
      486:  245:  for (int i = 0; i < No_Buckets; i++) {
      459:  246:    entry_t *t = ht->buckets[i];
      566:  247:      while (t->next != NULL) {
      107:  248:        counter = counter + 1;
      107:  249:        t = t->next;
        -:  250:      }
        -:  251:  }
       27:  252:  return counter;
        -:  253:}
        -:  254:
        2:  255:bool ioopm_hash_table_is_empty(ioopm_hash_table_t *ht)
        -:  256:{
       25:  257:  for (int i = 0; i < No_Buckets; i++) {
       24:  258:    if (ht->buckets[i]->next != NULL) {
        1:  259:      return false;
        -:  260:    }
        -:  261:  }
        1:  262:  return true;
        -:  263:}
        -:  264:
        1:  265:void ioopm_hash_table_clear(ioopm_hash_table_t *ht) 
        -:  266:{
       18:  267:  for (int i = 0; i < No_Buckets; i++) {
       17:  268:    entry_t *t = ht->buckets[i]->next;
       17:  269:    if (t != NULL)
        -:  270:    {
        1:  271:      entry_destroy(t);
        1:  272:      ht->buckets[i]->next = NULL;
        -:  273:    }
        -:  274:  }
        1:  275:}
        -:  276:
       26:  277:ioopm_list_t *ioopm_hash_table_keys(ioopm_hash_table_t *ht)
        -:  278:{
       26:  279:  ioopm_list_t *new_list = ioopm_linked_list_create(int_compare);
        -:  280:  
      468:  281:  for (int i = 0; i < No_Buckets; i++) {
      442:  282:    entry_t *t = ht->buckets[i]->next;
      553:  283:    while (t != NULL) {
      111:  284:      ioopm_linked_list_append(new_list, t->key);
      111:  285:      t = t->next;
        -:  286:    }
        -:  287:  }
       26:  288:  return new_list;
        -:  289:}
        -:  290:
        -:  291:
       25:  292:ioopm_list_t *ioopm_hash_table_values(ioopm_hash_table_t *ht) 
        -:  293:{
       25:  294:  ioopm_list_t *new_list = ioopm_linked_list_create(int_compare);
        -:  295:  
      450:  296:  for (int i = 0; i < No_Buckets; i++) {
      425:  297:    entry_t *t = ht->buckets[i]->next;
      531:  298:    while (t != NULL) {
      106:  299:      ioopm_linked_list_append(new_list, t->value);
      106:  300:      t = t->next;
        -:  301:    }
        -:  302:  }
       25:  303:  return new_list;
        -:  304:}
        -:  305:
        -:  306:
        -:  307:
       27:  308:static bool key_equiv(elem_t key, elem_t value_ignored, void *x)
        -:  309:{
       27:  310:  if(key.string_value != NULL) {
       27:  311:    elem_t *other_key_ptr = x;
       27:  312:    char *other_key = other_key_ptr->string_value;
       27:  313:    return key.string_value == other_key; 
        -:  314:  } else {
    #####:  315:    elem_t *other_key_ptr = x;
    #####:  316:    int other_key = other_key_ptr->int_value;
    #####:  317:    return key.int_value == other_key;
        -:  318:  }
        -:  319:}
        -:  320:
       30:  321:static bool value_equiv(elem_t key_ignored, elem_t value, void *x)
        -:  322:{
       30:  323:  if(value.string_value != NULL) {
       30:  324:    elem_t *other_value_ptr = x;
       30:  325:    char *other_value = other_value_ptr->string_value;
       30:  326:    return strcmp(value.string_value, other_value) == 0;
        -:  327:  } else {
    #####:  328:    elem_t *other_value_ptr = x;
    #####:  329:    int other_value = other_value_ptr->int_value;
    #####:  330:    return value.int_value == other_value;
        -:  331:  }
        -:  332:}
        -:  333:
        3:  334:bool ioopm_hash_table_all(ioopm_hash_table_t *ht, ioopm_predicate pred, void *arg)
        -:  335:{
        3:  336:  size_t size = ioopm_hash_table_size(ht);
        3:  337:  ioopm_list_t *linked_list = ioopm_hash_table_keys(ht);
        3:  338:  ioopm_link_t *link = linked_list->first;
        -:  339:
        3:  340:  ioopm_list_t *arr_v = ioopm_hash_table_values(ht);
        3:  341:  ioopm_link_t *arr = arr_v->first;
       3*:  342:  for (int i = 0; i < size; link = link->next, i++) {
        2:  343:    if (!pred(link->element, arr->element, arg)) {
        2:  344:      ioopm_linked_list_destroy(linked_list);
        2:  345:      ioopm_linked_list_destroy(arr_v);
        2:  346:      return false;   
        -:  347:    }
        -:  348:  } 
        1:  349:  ioopm_linked_list_destroy(linked_list);
        1:  350:  ioopm_linked_list_destroy(arr_v);
        1:  351:  return true;
        -:  352:}
        -:  353:
        -:  354:
       20:  355:bool ioopm_hash_table_any(ioopm_hash_table_t *ht, ioopm_predicate pred, void *arg)
        -:  356:{
       20:  357:  size_t size = ioopm_hash_table_size(ht);
       20:  358:  ioopm_list_t *linked_list = ioopm_hash_table_keys(ht);
       20:  359:  ioopm_link_t *link = linked_list->first;
        -:  360:
       20:  361:  ioopm_list_t *arr_v = ioopm_hash_table_values(ht);
       20:  362:  ioopm_link_t *arr = arr_v->first;
       59:  363:  for (int i = 0; i < size; link = link->next, arr = arr->next, i++) {
       57:  364:    if (pred(link->element, arr->element, arg)) {
       18:  365:      ioopm_linked_list_destroy(linked_list);
       18:  366:      ioopm_linked_list_destroy(arr_v);
       18:  367:      return true;  
        -:  368:    }
        -:  369:  } 
        2:  370:  ioopm_linked_list_destroy(linked_list);
        2:  371:  ioopm_linked_list_destroy(arr_v);
        2:  372:  return false;
        -:  373:}
        -:  374:
       10:  375:bool ioopm_hash_table_has_key(ioopm_hash_table_t *ht, elem_t key) {
       10:  376:  return ioopm_hash_table_any(ht, key_equiv, &key);
        -:  377:}
        -:  378:
       10:  379:bool ioopm_hash_table_has_value(ioopm_hash_table_t *ht, elem_t value) {
       10:  380:  return ioopm_hash_table_any(ht, value_equiv, &value);
        -:  381:}
        -:  382:
        -:  383:
        1:  384:void ioopm_hash_table_apply_to_all(ioopm_hash_table_t *ht, ioopm_apply_function apply_fun, void *arg)
        -:  385:{
        1:  386:  size_t size = ioopm_hash_table_size(ht); 
        1:  387:  ioopm_list_t *linked_list = ioopm_hash_table_keys(ht);
        1:  388:  ioopm_link_t *link = linked_list->first;
        -:  389:
        1:  390:  ioopm_list_t *arr_v = ioopm_hash_table_values(ht);
        1:  391:  ioopm_link_t *arr = arr_v->first;
        6:  392:  for (int i = 0; i < size; link = link->next, arr = arr->next, i++) {
        5:  393:    apply_fun(link->element, arr->element, arg);
        -:  394:  }
        1:  395:  ioopm_linked_list_destroy(linked_list);
        1:  396:  ioopm_linked_list_destroy(arr_v);
        1:  397:}
